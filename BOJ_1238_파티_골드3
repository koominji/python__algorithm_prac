from collections import deque
import heapq

n,e,start=map(int,input().split())

INF=int(10e9)

graph = [[] for _ in range(n + 1)]

for _ in range(e):
    a,b,d=map(int,input().split())
    graph[a].append((b,d))


def sol(start,distance):
    q=[]
    heapq.heappush(q,(0,start))
    distance[start]=0

    while q:
        dist,node=heapq.heappop(q)

        for i in graph[node]:
            cost=distance[node]+i[1]
            if cost<distance[i[0]]:
                distance[i[0]]=cost
                heapq.heappush(q,(cost,(i[0])))

go=[]
for i in range(1,n+1):
    distance = [INF for _ in range(n + 1)]
    sol(i,distance)
    go.append(distance[start])
    if start==i:
        comeback=distance[1:]

ans=[]
for a,b in zip(go,comeback):
    ans.append(a+b)

print(max(ans))