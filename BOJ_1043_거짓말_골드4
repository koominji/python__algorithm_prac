from collections import deque 
import sys 

n,m=map(int,input().split())
truth=list(map(int,sys.stdin.readline().strip().split()))
graph=[[] for _ in range(n+1)]
total_parties=[]
for _ in range(m):
    party=list(map(int,sys.stdin.readline().strip().split()))
    total_parties.append(party[1:])
    if party[0]>1:
        # print("p >> ",party)
        for i in range(1,party[0]):
            # print(party[i+1],graph[party[i]])
            if party[i+1] in graph[party[i]]:
                continue
            else:
                graph[party[i]].append(party[i+1])
                graph[party[i+1]].append(party[i])
                # print(graph)

visited=[False]*(n+1)
def bfs(x):
    if visited[x]:
        return 
    q=deque([x])
    while q:
        node=q.popleft() 
        if visited[node]:
            continue
        visited[node]=True 
        for i in graph[node]:
            if not visited[i]:
                q.append(i)


for t in truth[1:]:
    bfs(t)

# print("visited >",visited)
cnt=0
for party in total_parties: 
    tmp=0
    for p in party:
        if visited[p]:
            tmp+=1
            continue
    if not tmp:
        cnt+=1

print(cnt)