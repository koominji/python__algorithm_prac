import heapq

n=int(input())
INF=int(1e9)

def sol(start):
    distance[start]=0
    q=[]
    heapq.heappush(q,(0,start))

    while q:
        t,n=heapq.heappop(q)

        if distance[n]<t:
            continue
        for i in graph[n]:
            cost=t+i[1]
            if cost<distance[i[0]]:
                distance[i[0]]=cost
                heapq.heappush(q,(cost,i[0]))


ans=[]
for _ in range(n):
    n,d,c=map(int,input().split())
    graph=[[] for _ in range(n+1)]
    distance=[INF]*(n+1)
    times=[]    

    for _ in range(d):
        a,b,s=map(int,input().split())
        graph[b].append((a,s))
    sol(c)
    cnt=0
    for d in distance:
        if d<INF:
            cnt+=1
            times.append(d)
    ans.append((cnt,max(times)))

for a in ans:
    print(a[0],a[1])