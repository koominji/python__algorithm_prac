from collections import deque
import sys

col,row=map(int,input().split())
graph=[]
room_info=[[0]*(col) for _ in range(row)]
visited=[[False]*(col) for _ in range(row)]
for _ in range(row):
    graph.append(list(map(int,sys.stdin.readline().strip().split())))

dx=[1,0,-1,0]
dy=[0,1,0,-1]
def bfs(x,y):
    if visited[x][y]:
        return
    room_loc=[]
    global cnt
    cnt=0
    q=deque([[x,y]])
    while q:
        curr_x,curr_y=q.popleft()
        if visited[curr_x][curr_y]:
            continue
        visited[curr_x][curr_y] = True
        room_loc.append([curr_x,curr_y])
        cnt+=1
        num=graph[curr_x][curr_y]
        num_byte=bin(num)[2:]
        while len(num_byte)<4:
            num_byte="0"+num_byte
        for i in range(4):
            if num_byte[i]=='0':
                next_x,next_y=curr_x+dx[i],curr_y+dy[i]
                if not visited[next_x][next_y]:
                    q.append([next_x,next_y])
    return room_loc

room_type=0
max_room_size=0
for i in range(row):
    for j in range(col):
        cnt=0
        room_loc=bfs(i,j)
        if cnt:
            room_type+=1
            if cnt>max_room_size:
                max_room_size=cnt
            for r,c, in room_loc:
                room_info[r][c]=[room_type,cnt]

print(room_type)
print(max_room_size)

max_new_room=0
for r in range(row):
    for c in range(col):
        for x_move,y_move in zip(dx,dy):
            next_x,next_y=r+x_move,c+y_move
            if 0<=next_x<row and 0<=next_y<col:
                curr_room,curr_size=room_info[r][c]
                next_room,next_size=room_info[next_x][next_y]
                if curr_room==next_room:
                    continue
                else:
                    maybe_max_size=curr_size+next_size
                    if maybe_max_size>max_new_room:
                        max_new_room=maybe_max_size

print(max_new_room)