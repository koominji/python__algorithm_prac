import sys,heapq 

vertex,edge=map(int,input().split())
k=int(input())

graph=[[] for _ in range(vertex+1)]
for _ in range(edge):
    u,v,w=map(int,sys.stdin.readline().strip().split())
    graph[u].append([v,w])
    
INF=int(1e9)
distance=[INF]*(vertex+1)

def dijkstra(start):
    q=[]
    heapq.heappush(q,[0,start])
    distance[start]=0
    while q:
        dist,node=heapq.heappop(q)
        for n in graph[node]:
            if distance[n[0]]<dist:
                continue
            cost=dist+n[1]
            if cost<distance[n[0]]:
                distance[n[0]]=min(cost,distance[n[0]])
                heapq.heappush(q,[cost,n[0]])
                
                
dijkstra(k)

for i in range(1,vertex+1):
    if distance[i]>=INF:
        print("INF")
    else:
        print(distance[i])